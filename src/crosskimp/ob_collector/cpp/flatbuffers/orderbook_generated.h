// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ORDERBOOK_ORDERBOOKDATA_H_
#define FLATBUFFERS_GENERATED_ORDERBOOK_ORDERBOOKDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace OrderBookData {

struct PriceLevel;
struct PriceLevelBuilder;

struct OrderBook;
struct OrderBookBuilder;

struct PriceLevel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PriceLevelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICE = 4,
    VT_QUANTITY = 6
  };
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  double quantity() const {
    return GetField<double>(VT_QUANTITY, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_PRICE, 8) &&
           VerifyField<double>(verifier, VT_QUANTITY, 8) &&
           verifier.EndTable();
  }
};

struct PriceLevelBuilder {
  typedef PriceLevel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_price(double price) {
    fbb_.AddElement<double>(PriceLevel::VT_PRICE, price, 0.0);
  }
  void add_quantity(double quantity) {
    fbb_.AddElement<double>(PriceLevel::VT_QUANTITY, quantity, 0.0);
  }
  explicit PriceLevelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PriceLevel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PriceLevel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PriceLevel> CreatePriceLevel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double price = 0.0,
    double quantity = 0.0) {
  PriceLevelBuilder builder_(_fbb);
  builder_.add_quantity(quantity);
  builder_.add_price(price);
  return builder_.Finish();
}

struct OrderBook FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderBookBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXCHANGE_NAME = 4,
    VT_SYMBOL = 6,
    VT_TIMESTAMP = 8,
    VT_SEQUENCE = 10,
    VT_BIDS = 12,
    VT_ASKS = 14
  };
  const ::flatbuffers::String *exchange_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXCHANGE_NAME);
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  int64_t sequence() const {
    return GetField<int64_t>(VT_SEQUENCE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>> *bids() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>> *>(VT_BIDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>> *asks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>> *>(VT_ASKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EXCHANGE_NAME) &&
           verifier.VerifyString(exchange_name()) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<int64_t>(verifier, VT_SEQUENCE, 8) &&
           VerifyOffset(verifier, VT_BIDS) &&
           verifier.VerifyVector(bids()) &&
           verifier.VerifyVectorOfTables(bids()) &&
           VerifyOffset(verifier, VT_ASKS) &&
           verifier.VerifyVector(asks()) &&
           verifier.VerifyVectorOfTables(asks()) &&
           verifier.EndTable();
  }
};

struct OrderBookBuilder {
  typedef OrderBook Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_exchange_name(::flatbuffers::Offset<::flatbuffers::String> exchange_name) {
    fbb_.AddOffset(OrderBook::VT_EXCHANGE_NAME, exchange_name);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(OrderBook::VT_SYMBOL, symbol);
  }
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(OrderBook::VT_TIMESTAMP, timestamp, 0);
  }
  void add_sequence(int64_t sequence) {
    fbb_.AddElement<int64_t>(OrderBook::VT_SEQUENCE, sequence, 0);
  }
  void add_bids(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>>> bids) {
    fbb_.AddOffset(OrderBook::VT_BIDS, bids);
  }
  void add_asks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>>> asks) {
    fbb_.AddOffset(OrderBook::VT_ASKS, asks);
  }
  explicit OrderBookBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrderBook> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrderBook>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrderBook> CreateOrderBook(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> exchange_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    int64_t timestamp = 0,
    int64_t sequence = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>>> bids = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OrderBookData::PriceLevel>>> asks = 0) {
  OrderBookBuilder builder_(_fbb);
  builder_.add_sequence(sequence);
  builder_.add_timestamp(timestamp);
  builder_.add_asks(asks);
  builder_.add_bids(bids);
  builder_.add_symbol(symbol);
  builder_.add_exchange_name(exchange_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OrderBook> CreateOrderBookDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *exchange_name = nullptr,
    const char *symbol = nullptr,
    int64_t timestamp = 0,
    int64_t sequence = 0,
    const std::vector<::flatbuffers::Offset<OrderBookData::PriceLevel>> *bids = nullptr,
    const std::vector<::flatbuffers::Offset<OrderBookData::PriceLevel>> *asks = nullptr) {
  auto exchange_name__ = exchange_name ? _fbb.CreateString(exchange_name) : 0;
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  auto bids__ = bids ? _fbb.CreateVector<::flatbuffers::Offset<OrderBookData::PriceLevel>>(*bids) : 0;
  auto asks__ = asks ? _fbb.CreateVector<::flatbuffers::Offset<OrderBookData::PriceLevel>>(*asks) : 0;
  return OrderBookData::CreateOrderBook(
      _fbb,
      exchange_name__,
      symbol__,
      timestamp,
      sequence,
      bids__,
      asks__);
}

inline const OrderBookData::OrderBook *GetOrderBook(const void *buf) {
  return ::flatbuffers::GetRoot<OrderBookData::OrderBook>(buf);
}

inline const OrderBookData::OrderBook *GetSizePrefixedOrderBook(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OrderBookData::OrderBook>(buf);
}

inline bool VerifyOrderBookBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OrderBookData::OrderBook>(nullptr);
}

inline bool VerifySizePrefixedOrderBookBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OrderBookData::OrderBook>(nullptr);
}

inline void FinishOrderBookBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OrderBookData::OrderBook> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOrderBookBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OrderBookData::OrderBook> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace OrderBookData

#endif  // FLATBUFFERS_GENERATED_ORDERBOOK_ORDERBOOKDATA_H_
