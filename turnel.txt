1. 한글로 대답해.
2. 개인 개발이라 오버엔지니어링 하지마
3. 코딩을 전혀 몰라 쉽게 설명해.
4. 문제 발생시 코드를 늘려서 해결하지 말고 관련된 파일을 수정해서 근본적 해결방법을 제시해.



# 텔레그램 알림 시스템 설계

## 폴더 구조 제안
```
src/crosskimp/
├── common/
│   ├── events/
│   │   ├── sys_event_bus.py (기존)
│   │   └── event_types.py (이벤트 유형 확장)
│   └── metrics/
│       ├── collectors.py (메트릭 수집기)
│       └── store.py (메트릭 저장소)
├── notifications/
│   ├── __init__.py
│   ├── notification_manager.py (알림 관리 중앙화)
│   ├── telegram_notifier.py (텔레그램 전용 알림)
│   ├── formatters/ (포맷팅)
│   │   ├── __init__.py 
│   │   ├── process_formatter.py (프로세스 알림 포맷)
│   │   ├── metrics_formatter.py (메트릭 알림 포맷)
│   │   └── order_formatter.py (주문 알림 포맷)
│   └── templates/ (알림 템플릿)
│       ├── startup.txt
│       ├── metrics.txt
│       └── orders.txt
└── services/
    ├── command_handler.py (기존)
    ├── telegram_commander.py (기존)
    └── metrics_service.py (메트릭 서비스)
```

## 설계 원칙

1. **관심사 분리**
   - 알림 생성, 포맷팅, 전송을 각각 분리
   - 서비스 로직과 알림 로직을 명확하게 구분

2. **이벤트 기반 설계**
   - `sys_event_bus.py`를 중심으로 모든 상태 변화를 이벤트로 발행
   - 새 이벤트 유형 추가 (`METRIC_UPDATE`, `ORDER_EXECUTED` 등)

3. **확장성 고려**
   - 텔레그램 외 다른 알림 채널도 추가 가능한 구조
   - 알림 유형별로 구독 설정 가능하게 설계

## 핵심 컴포넌트 설명

1. **NotificationManager**
   - 모든 알림을 중앙에서 관리
   - 이벤트 버스에서 알림 대상 이벤트 구독
   - 알림 우선순위와 필터링 관리

2. **TelegramNotifier**
   - 텔레그램 전용 알림 전송 담당
   - 포맷터를 사용해 텔레그램에 맞는 메시지 생성
   - 실제 알림 전송 로직 캡슐화

3. **포맷터 클래스들**
   - 각 알림 유형별 포맷팅 담당
   - 템플릿 활용으로 일관된 메시지 스타일 유지
   - 텔레그램 마크다운/HTML 지원

4. **MetricsService**
   - 시스템 메트릭 수집 및 관리
   - 주기적으로 메트릭 이벤트 발행
   - 임계치 설정으로 중요 메트릭 변화 감지

## 데이터 흐름

1. 프로세스 시작/종료 시 이벤트 발행
2. 이벤트 버스에서 NotificationManager로 전달
3. NotificationManager에서 적절한 포맷터로 메시지 생성
4. TelegramNotifier를 통해 알림 전송

이 구조는 확장성이 높고 각 컴포넌트가 명확한 역할을 갖도록 설계되었습니다. 새로운 알림 유형이나 채널을 추가하기 쉽고, 시스템 전체의 결합도를 낮추는 데 도움이 됩니다.



메트릭 수집기(collectors.py)와 메트릭 서비스(metrics_service.py)의 차이는 다음과 같습니다:

## 메트릭 수집기(collectors.py)
- **역할**: 실제 데이터 수집에 집중
- **기능**:
  - CPU, 메모리, 네트워크 등 시스템 리소스 데이터 수집
  - 프로세스 상태 정보 수집 (실행 중, 정지됨 등)
  - 주문 처리량, 지연 시간 등 애플리케이션 성능 지표 수집
- **특징**: 데이터 소스와 직접 연결되는 저수준 컴포넌트

## 메트릭 서비스(metrics_service.py)
- **역할**: 수집된 메트릭 관리 및 배포
- **기능**:
  - 여러 수집기 조율 및 실행 주기 관리
  - 수집된 메트릭을 이벤트 버스에 발행
  - 임계값 기반 알림 트리거 로직
  - 다른 서비스에 메트릭 데이터 제공 인터페이스
- **특징**: 애플리케이션과 메트릭 수집 로직 사이의 중간 레이어

즉, 수집기는 데이터를 "가져오는" 역할을 하고, 서비스는 그 데이터를 "관리하고 활용하는" 역할을 합니다. 메트릭을 저장하지 않는다면 store.py는 제외해도 됩니다.
