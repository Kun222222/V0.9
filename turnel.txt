1. 한글로 대답해.
2. 개인 개발이라 오버엔지니어링 하지마
3. 코딩을 전혀 몰라 쉽게 설명해.
4. 문제 발생시 설계의 문제가 있는건지 최우선적으로 확인해.
5. 코드를 늘려서 해결하지 말고 관련된 파일을 수정해서 근본적 해결방법을 제시해.


각 거래소의 데이터 수신 현황을 이벤트 버스로 보내기 위해 다음과 같은 메트릭 데이터를 가공하는 것이 좋겠습니다:

### 기본 메트릭 데이터
1. **메시지 수신 통계**
   - 초당 수신 메시지 수 (message_rate)
   - 누적 메시지 수 (total_message_count)
   - 마지막 메시지 수신 시간 (last_message_time)

2. **구독 상태 정보**
   - 구독 중인 심볼 목록 (subscribed_symbols)
   - 전체 구독 심볼 수 (subscription_count)
   - 각 심볼별 구독 상태 (active/inactive)

3. **성능 지표**
   - 스냅샷/델타 처리 평균 시간 (processing_time_ms)
   - 메시지 처리 지연 시간 (latency_ms)

4. **오류 관련 지표**
   - 오류 발생 횟수 (error_count)
   - 마지막 오류 발생 시간 (last_error_time)
   - 오류 유형별 카운트 (error_types)

### 거래소별 특화 데이터
1. **오더북 상태 정보**
   - 각 심볼별 최신 시퀀스 번호 (last_sequence)
   - 각 심볼별 최근 업데이트 시간 (last_update_time)
   - 스프레드 정보 (가장 좋은 매수/매도 호가 차이)

2. **연결 상태 정보**
   - 웹소켓 연결 상태 (is_connected)
   - 연결 유지 시간 (connection_uptime)
   - 재연결 시도 횟수 (reconnection_count)

### 구현 방법

```python
class ExchangeMetricsCollector:
    def __init__(self, event_bus):
        self.event_bus = event_bus
        self.metrics_cache = {}  # 각 거래소별 메트릭 데이터 캐시
        
    def collect_metrics(self, subscription):
        """
        구독 객체에서 메트릭 데이터 수집
        """
        exchange = subscription.exchange_code
        metrics = {
            "timestamp": time.time(),
            "exchange": exchange,
            "message_stats": {
                "count": subscription._message_count,
                "rate": self._calculate_message_rate(subscription),
                "last_time": self._get_last_message_time(subscription)
            },
            "subscription_stats": {
                "symbol_count": len(subscription.subscribed_symbols),
                "symbols": list(subscription.subscribed_symbols.keys())
            },
            "performance": {
                "snapshot_processing_time": self._calculate_avg_processing_time(subscription, "snapshot"),
                "delta_processing_time": self._calculate_avg_processing_time(subscription, "delta")
            },
            "orderbook_stats": self._collect_orderbook_stats(subscription)
        }
        
        # 캐시 업데이트
        self.metrics_cache[exchange] = metrics
        
        # 이벤트 버스로 전송
        return metrics
        
    # (그 외 보조 메서드들 생략)
```

이 컬렉터는 각 구독 객체에서 데이터를 수집하고, 가공하여 이벤트 버스로 전송합니다. 이런 방식으로 중앙 집중화된 메트릭 수집 및 전송 기능을 구현할 수 있습니다.
