1. 한글로 대답해.
2. 개인 개발이라 오버엔지니어링 하지마
3. 코딩을 전혀 몰라 쉽게 설명해.
4. 문제 발생시 설계의 문제가 있는건지 최우선적으로 확인해.
5. 코드를 늘려서 해결하지 말고 관련된 파일을 수정해서 근본적 해결방법을 제시해.
6. 내 말에 무조껀 동의하지마. 난 코딩을 모르는 사람이야.
7. /Users/kun/Desktop/CrossKimpArbitrage/v0.6/tests가 테스트용 파일 폴더야.


연결 끊김 문제 분석 및 접근법
업비트와 빗썸에서만 10분 후 연결이 끊기는 문제를 해결하기 위한 구체적인 방향성을 제시하겠습니다.
가능한 원인
메시지 핸들러 락 문제:
_message_handler_lock을 모든 거래소 커넥터가 사용하는데, 이 락이 비동기 실행 흐름을 방해할 가능성
핑/퐁 메커니즘 차이:
업비트와 빗썸은 _ping_handler() 사용
다른 거래소는 다른 메커니즘 사용
이 차이가 장기 실행 시 문제를 일으킬 수 있음
타임아웃 설정:
메시지 수신 타임아웃이 60초로 설정된 부분 (await asyncio.wait_for(self.ws.recv(), timeout=60))
다른 거래소와 차이가 있을 수 있음
재연결 로직 차이:
ConnectionManager 사용 방식의 불일치
조사 및 수정 접근법
필수 기능 식별 및 단순화:
핵심 기능만 남기고 나머지 제거
특히 락 관련 코드와 불필요한 타임아웃 설정 재검토
로그 분석 강화:
연결 끊기기 직전 로그 분석
각 거래소별 메시지 처리 시간 측정 로그 추가
이벤트 루프 모니터링 추가:
asyncio 이벤트 루프 블로킹 여부 확인
메시지 처리 시간 측정
공통 코드 통일:
핑/퐁 메커니즘 표준화
재연결 로직 일관화
메시지 핸들러 구현 통일
격리 테스트:
업비트와 빗썸만 실행하여 문제 재현
메모리/CPU 사용량 모니터링 추가
핵심은 코드를 단순화하여 다양한 구현 차이를 제거하고, 문제를 정확히 파악하는 데 집중하는 것입니다. 구현 차이로 인한 미묘한 상호작용이 문제의 원인일 가능성이 높습니다.
