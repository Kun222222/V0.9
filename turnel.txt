1. 한글로 대답해.
2. 개인 개발이라 오버엔지니어링 하지마
3. 코딩을 전혀 몰라 쉽게 설명해.
4. 문제 발생시 코드를 늘려서 해결하지 말고 관련된 파일을 수정해서 근본적 해결방법을 제시해.


@base_subscription.py @base_parser.py @base_connector.py @metrics_manager.py 각각의 베이스 파일이 있는데 @order_manager.py 의 코드가 있는데 이 코드가 길어지는 이유가 뭐야?




# 크로스김프 시스템 개선 계획

현재 시스템 구조를 보니 `crosskimp_system.py`가 통합 진입점이고, `ob_collector/main.py`는 오더북 수집기의 독립/통합 실행을 지원하지만, 텔레그램봇은 아직 독립 실행 진입점이 없습니다.

## 개선 계획

1. **텔레그램봇 독립 진입점 생성**
   - `telegrambot/main.py` 새로 만들기
   - 통합 모드 확인 플래그 추가 (`IS_INTEGRATED_MODE`)
   - 독립 실행 시 필요한 초기화 코드 구현

2. **모듈 구조 통일**
   - 각 모듈(텔레그램봇, 오더북 수집기)이 동일한 패턴으로 동작하도록 구성
   - 독립/통합 실행 모드 구분
   - 시작/종료 메시지 처리 통일

3. **프로세스 관리자 개선**
   - 프로세스 생명주기 관리 강화
   - 자동 재시작 기능 구현
   - 오류 처리 및 복구 기능 보강

4. **메인 진입점 구현**
   - 각 모듈용 독립 실행 스크립트 (`python -m crosskimp.telegrambot.main`)
   - 통합 실행 스크립트 (`python -m crosskimp.crosskimp_system`)
   - 명령행 인자로 실행 모드 제어

5. **통신 인터페이스 표준화**
   - 모듈 간 상태 공유 메커니즘 개선
   - 이벤트 기반 통신 구현
   - 안정적인 종료 처리 보장

구현 순서:
1. 텔레그램봇 `main.py` 구현
2. 각 모듈 인터페이스 표준화
3. 통합 시스템 개선
